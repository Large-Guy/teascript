// Function definition
function foo()
{
    print("foo")
}

foo()   // Expect: foo

// Print a function
function a() { }

print(a)    // Expect: <function a>

// Print an anonymous function
print(function() {})   // Expect: <anonymous function>

// Function arguments
function baz(a, b, c)
{
    return a + b + c
}

var foo = baz("Red", " Blue", " Orange")
print(foo)  // Expect: Red Blue Orange

// Function returning nothing
function bar()
{
    return
}

bar()   // Expect: nothing

// Function returning multiple values
function foo(a, b, c)
{
    return a, b, c
}

a, b, c = foo(12, 36, 56)

print(foo(12, 32))  // Expect: 12   32
print(foo("Hello", "World", "!"))    // Expect: Hello    World      !
print(foo("Hello", 32, false))       // Expect: Hello    32         false

// Assign function to a variable
bar = function(bar)
{
    print(bar)
}

bar("bar")   // Expect: bar

// Return a function from a function
function foo()
{
    return function()
    {
        print("bar")
    }
}

bar = foo
bar()()     // Expect: bar

// Closures and return function
function bar(a, b)
{
    print(a + b)

    function foo(c, d)
    {
        print(c + d)
    }

    return foo
}

foo = bar
foo("foo", "bar")(12, 24)   // Expect: foobar 36

// Callback function
function foo(c)
{
    c()
}

// Function as argument in a function
foo(function()
    {
        print("Hello!")     // Expect: Hello!
    }
)

// Function arguments with default values
function bar(a = 12, b = "Hi", c)
{
    print(a, b, c)
}

bar()       // Expect: 12       Hi      null

// Not passing arguments to a function
function foo(a, b, c)
{
    print(a, b, c)
}

foo()       // Expect: null     null    null
foo(12)     // Expect: 12       null    null